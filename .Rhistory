interaction_term <- paste0(variable_name[19:24],":discharge_44")
formula_str_fixed <- paste0("Outcome ~ ",paste(c(variable_name[1:18],
interaction_term,"discharge_44"),collapse = " + "))
formula_str_mixed <- paste0("Outcome ~ ", paste(c(variable_name[2:18],  # Adjusted indices
interaction_term, "discharge_44"), collapse = " + "),
" + (1|center)")
formula_mixed <- as.formula(formula_str_mixed)
formula_fixed <- as.formula(formula_str_mixed)
#| echo: false
#| label: fig-lasso_cv
#| warning: false
#| fig-cap: Cross-Validation Plot for Lambda Selection
# Assuming X_train is your predictor matrix and y_train is your response vector
X_matrix <- model.matrix(object = formula_fixed, data = X_train)[,-1]
y_vector <- y_train
cv_model <- cv.glmnet(X_matrix, y_vector, family = "binomial", alpha = 1)
#| echo: false
#| label: training set
#| warning: false
### select 30% as validation set, and 70% as training dataset.
load(file = "project2_data/completed_data.Rda")
train_id <- sample(data.new$record_id,size = round(0.7*nrow(data.new)),replace = FALSE)
validation_id <- setdiff(data.new$record_id,train_id)
train_sets <- lapply(completed_data,FUN = function(X){X %>%
filter(record_id %in% train_id)})
validation_sets <- lapply(completed_data,FUN = function(X){X %>%
filter(record_id %in% validation_id)})
X_train <- train_sets[[1]]
y_train <- train_sets[[1]][,27]
variable_name <- colnames(X_train)[-c(1,27)]
interaction_term <- paste0(variable_name[19:24],":discharge_44")
formula_str_fixed <- paste0("Outcome ~ ",paste(c(variable_name[1:18],
interaction_term,"discharge_44"),collapse = " + "))
formula_str_mixed <- paste0("Outcome ~ ", paste(c(variable_name[2:18],  # Adjusted indices
interaction_term, "discharge_44"), collapse = " + "),
" + (1|center)")
formula_mixed <- as.formula(formula_str_mixed)
formula_fixed <- as.formula(formula_str_fixed)
#| echo: false
#| label: fig-lasso_cv
#| warning: false
#| fig-cap: Cross-Validation Plot for Lambda Selection
# Assuming X_train is your predictor matrix and y_train is your response vector
X_matrix <- model.matrix(object = formula_fixed, data = X_train)[,-1]
y_vector <- y_train
cv_model <- cv.glmnet(X_matrix, y_vector, family = "binomial", alpha = 1)
plot(cv_model)
# Fit the random intercept model
glmm_model <- lme4::glmer(formula = formula_str_mixed, data = X_train, family = "binomial")
# View the model summary
summary(glmm_model)
library(riskCommunicator)
library(tidyverse)
library(tableone)
library(nhanesA)
library(knitr)
library(pROC)
library(kableExtra)
library(corrplot)
library(MASS)
#library(Metrics)
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = FALSE, fig.align = "center")
#| label: function define
#| echo: false
#| warning: false
missing_heatmap <- function(data,title,color_pre = "yellow", color_miss = "black"){
missing_values <- is.na(data)
# Melt the matrix for use with ggplot
missing_melted <- reshape2::melt(missing_values,
id.vars = rownames(missing_values))
# Create the heatmap
g <- ggplot2::ggplot(missing_melted, aes(x = Var2, y = Var1)) +
geom_tile(aes(fill = value)) +
scale_fill_manual(name = "", labels = c("Present", "Missing"),
values = c(color_pre,color_miss)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(x = "Variables", y = "Observations",title = title)+
theme(plot.title = element_text(hjust = 0.5))
return(g)
}
#| warning: false
#| label: framingham_data
#| echo: false
library(tidyverse)
data("framingham")
# The Framingham data has been used to create models for cardiovascular risk.
# The variable selection and model below are designed to mimic the models used
# in the paper General Cardiovascular Risk Profile for Use in Primary Care
# This paper is available (cvd_risk_profile.pdf) on Canvas.
framingham_df <- framingham %>% dplyr::select(c(CVD, TIMECVD, SEX, TOTCHOL, AGE,
SYSBP, DIABP, CURSMOKE, DIABETES, BPMEDS,
HDLC, BMI))
framingham_df <- na.omit(framingham_df)
# CreateTableOne(data=framingham_df, strata = c("SEX"))
# Get blood pressure based on whether or not on BPMEDS
framingham_df$SYSBP_UT <- ifelse(framingham_df$BPMEDS == 0,
framingham_df$SYSBP, 0)
framingham_df$SYSBP_T <- ifelse(framingham_df$BPMEDS == 1,
framingham_df$SYSBP, 0)
# Looking at risk within 15 years - remove censored data
# dim(framingham_df)
framingham_df <- framingham_df %>%
filter(!(CVD == 0 & TIMECVD <= 365*15)) %>%
dplyr::select(-c(TIMECVD))
# dim(framingham_df)
framingham_df$SEX <- as.factor(framingham_df$SEX)
framingham_df$DIABETES <- as.factor(framingham_df$DIABETES)
framingham_df$CURSMOKE <- as.factor(framingham_df$CURSMOKE)
framingham_df$BPMEDS <- as.factor(framingham_df$BPMEDS)
a <- CreateTableOne(data=framingham_df, strata = c("SEX"))
table_matrix <- print(a, printToggle = FALSE, noSpaces = TRUE)[,-4]
colnames(table_matrix)[1] <- "Male"
colnames(table_matrix)[2] <- "Female"
# Use kable to render the table
# kable(table_matrix, format = "latex", booktabs = TRUE,
#       col.names = c("Variable", "Male", "Female", "p-value"))
# kable(table_matrix, format = "latex", booktabs = TRUE,
#       col.names = c("Variable", "Male", "Female", "p-value")) %>%
#   kable_styling(latex_options = c("hold_position")) %>%
#   add_footnote(caption = "framingham summary", footnote_as_chunk = TRUE,
#                threeparttable = TRUE)
# Load the kableExtra package
# library(kableExtra)
# Create a caption as a footnote
caption_text <- "Table 1: Framingham Summary"
# Render the table with a caption as a footnote using kableExtra
kable(
table_matrix,
format = "latex",
booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value")
) %>%
kable_styling(latex_options = c("hold_position")) %>%
footnote(general = caption_text)
#| echo: false
#| label: nhanes_data
#| warning: false
# The NHANES data here finds the same covariates among this national survey data
library(nhanesA)
# blood pressure, demographic, bmi, smoking, and hypertension info
bpx_2017 <- nhanes("BPX_J") %>%
dplyr::select(SEQN, BPXSY1 ) %>%
rename(SYSBP = BPXSY1)
demo_2017 <- nhanes("DEMO_J") %>%
dplyr::select(SEQN, RIAGENDR, RIDAGEYR) %>%
rename(SEX = RIAGENDR, AGE = RIDAGEYR)
bmx_2017 <- nhanes("BMX_J") %>%
dplyr::select(SEQN, BMXBMI) %>%
rename(BMI = BMXBMI)
smq_2017 <- nhanes("SMQ_J") %>%
mutate(CURSMOKE = case_when(SMQ040 %in% c(1,2) ~ 1,
SMQ040 == 3 ~ 0,
SMQ020 == 2 ~ 0)) %>%
dplyr::select(SEQN, CURSMOKE)
bpq_2017 <- nhanes("BPQ_J") %>%
mutate(BPMEDS = case_when(
BPQ020 == 2 ~ 0,
BPQ040A == 2 ~ 0,
BPQ050A == 1 ~ 1,
TRUE ~ NA )) %>%
dplyr::select(SEQN, BPMEDS)
tchol_2017 <- nhanes("TCHOL_J") %>%
dplyr::select(SEQN, LBXTC) %>%
rename(TOTCHOL = LBXTC)
hdl_2017 <- nhanes("HDL_J") %>%
dplyr::select(SEQN, LBDHDD) %>%
rename(HDLC = LBDHDD)
diq_2017 <- nhanes("DIQ_J") %>%
mutate(DIABETES = case_when(DIQ010 == 1 ~ 1,
DIQ010 %in% c(2,3) ~ 0,
TRUE ~ NA)) %>%
dplyr::select(SEQN, DIABETES)
# Join data from different tables
df_2017 <- bpx_2017 %>%
full_join(demo_2017, by = "SEQN") %>%
full_join(bmx_2017, by = "SEQN") %>%
full_join(hdl_2017, by = "SEQN") %>%
full_join(smq_2017, by = "SEQN") %>%
full_join(bpq_2017, by = "SEQN") %>%
full_join(tchol_2017, by = "SEQN") %>%
full_join(diq_2017, by = "SEQN")
# Get blood pressure based on whether or not on BPMEDS
df_2017$SYSBP_UT <- ifelse(df_2017$BPMEDS == 0,
df_2017$SYSBP, 0)
df_2017$SYSBP_T <- ifelse(df_2017$BPMEDS == 1,
df_2017$SYSBP, 0)
df_2017$SEX <- as.factor(df_2017$SEX)
df_2017$DIABETES <- as.factor(df_2017$DIABETES)
df_2017$CURSMOKE <- as.factor(df_2017$CURSMOKE)
df_2017$BPMEDS <- as.factor(df_2017$BPMEDS)
df_2017.omit <- na.omit(df_2017)
b <- CreateTableOne(data = df_2017.omit, strata = c("SEX"))
table_matrix <- print(b, printToggle = FALSE, noSpaces = TRUE)[,-4]
colnames(table_matrix)[1] <- "Male"
colnames(table_matrix)[2] <- "Female"
# Use kable to render the table
# kable(table_matrix, format = "latex", booktabs = TRUE,
#       col.names = c("Variable", "Male", "Female", "p-value"))
# knitr::kable(table_matrix, format = "latex", booktabs = TRUE)
#
# kable(table_matrix, format = "latex", booktabs = TRUE,
#       col.names = c("Variable", "Male", "Female", "p-value")) %>%
#   kable_styling(latex_options = c("hold_position")) %>%
#   add_footnote(caption = "NHANES summary", footnote_as_chunk = TRUE,
#                threeparttable = TRUE)
# Create a caption as a footnote
caption_text <- "Table 2: NHANES Summary"
# Render the table with a caption as a footnote using kableExtra
kable(
table_matrix,
format = "latex",
booktabs = TRUE,
col.names = c("Variable", "Male", "Female", "p-value")
) %>%
kable_styling(latex_options = c("hold_position")) %>%
footnote(general = caption_text)
#| label: missing data
#| warning: false
#| echo: false
#| fig-cap: Missing heatmap of NHANES 2017
#missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017, title = "NHANES_2017","yellow","black")
#| label: missing data
#| warning: false
#| echo: false
#| fig-cap: Missing heatmap of NHANES 2017
#missing_heatmap(data = framingham_df, title = "framingham","yellow","black")
missing_heatmap(data = df_2017[,-c(1,11,12)], title = "NHANES_2017","yellow","black")
#| label: merging data set
#| warning: false
#| echo: false
df_2017 <- na.omit(df_2017)
# Remove DIABP from framingham_df
framingham_df <- framingham_df %>% dplyr::select(-c(DIABP)) %>% mutate(SEQN = 0)
df_2017 <- df_2017 %>% mutate(CVD = 0)
framingham_df <- framingham_df %>% mutate(IS.framingham = 1)
df_2017 <- df_2017 %>% mutate(IS.framingham = 0)
#### Combined data set
framingham_df_ordered <- framingham_df[names(df_2017)]
#### Split train and test set.
set.seed(123)
total_rows <- nrow(framingham_df_ordered) # Get the total number of rows in the dataframe
train_size <- round(total_rows * 0.7)
train_indices <- sample(1:total_rows, train_size)
train_set <- framingham_df_ordered[train_indices, ]
test_set <- rbind(framingham_df_ordered[-train_indices, ],df_2017)
train_set_men <- train_set[train_set$SEX==1,]
train_set_women <- train_set[train_set$SEX==2,]
test_set_men <- test_set[test_set$SEX==1,]
test_set_women <- test_set[test_set$SEX==2,]
#| label: model fit
#| warning: false
#| echo: false
# Fit models with log transforms for all continuous variables.
# We used the train dataset, which is a part of framingham dataset.
# Also, Make two models for men and women separately.
mod_men <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= train_set_men[train_set_men$IS.framingham==1,], family= "binomial")
mod_women <- glm(CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+
log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= train_set_women[train_set_women$IS.framingham==1,], family= "binomial")
# For Men
Y.fram.test.pred.men <- predict(mod_men, test_set_men[test_set_men$IS.framingham==1,],
type = "response")
Y.fram.test.true.men <- test_set_men$CVD[test_set_men$IS.framingham==1]
# For Women
Y.fram.test.pred.women <- predict(mod_women, test_set_women[test_set_women$IS.framingham==1,],
type = "response")
Y.fram.test.true.women <- test_set_women$CVD[test_set_women$IS.framingham==1]
#| label: performance in framingham
#| warning: false
#| echo: false
#| fig-cap: ROC Curves for Men and Women in Framingham
# ROC for men in framingham
roc_men <- pROC::roc(Y.fram.test.true.men,Y.fram.test.pred.men)
auc_men <- pROC::auc(roc_men)
brier_score_men <- mean((Y.fram.test.pred.men - Y.fram.test.true.men)^2)
# ROC for women in framingham
roc_women <- pROC::roc(Y.fram.test.true.women,Y.fram.test.pred.women)
auc_women <- pROC::auc(roc_women)
brier_score_women <- mean((Y.fram.test.pred.women - Y.fram.test.true.women)^2)
paste0("Brier Score in Framingham for men is ", brier_score_men)
paste0("Brier Score in Framingham for women is ", brier_score_women)
# brier_score_men
# brier_score_women
# Assuming you have already calculated roc_men and roc_women using the roc function
# as shown in previous examples
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.5, 0.4, auc_men)
text(1, 0.8, auc_women)
# # Print out the AUC and Brier scores
# print(paste("AUC for men:", auc_men))
# print(paste("Brier score for men:", brier_score_men))
# print(paste("AUC for women:", auc_women))
# print(paste("Brier score for women:", brier_score_women))
auc_men
round(auc_men)
round(auc_men,digits = 3)
#| label: performance in framingham
#| warning: false
#| echo: false
#| fig-cap: ROC Curves for Men and Women in Framingham
# ROC for men in framingham
roc_men <- pROC::roc(Y.fram.test.true.men,Y.fram.test.pred.men)
auc_men <- pROC::auc(roc_men)
brier_score_men <- mean((Y.fram.test.pred.men - Y.fram.test.true.men)^2)
# ROC for women in framingham
roc_women <- pROC::roc(Y.fram.test.true.women,Y.fram.test.pred.women)
auc_women <- pROC::auc(roc_women)
brier_score_women <- mean((Y.fram.test.pred.women - Y.fram.test.true.women)^2)
paste0("Brier Score in Framingham for men is ", brier_score_men)
paste0("Brier Score in Framingham for women is ", brier_score_women)
# brier_score_men
# brier_score_women
# Assuming you have already calculated roc_men and roc_women using the roc function
# as shown in previous examples
# Plot the ROC curve for men
plot(roc_men, col = "blue", main = "ROC Curves for Men and Women",
xlab = "1 - Specificity", ylab = "Sensitivity")
# Add the ROC curve for women to the same plot
lines(roc_women, col = "red")
# Add a legend to the plot
legend("bottomright", legend = c("Men", "Women"),
col = c("blue", "red"), lwd = 2)
text(0.5, 0.4, round(auc_men,digits = 3))
text(1, 0.8, round(auc_women,digits = 3))
# # Print out the AUC and Brier scores
# print(paste("AUC for men:", auc_men))
# print(paste("Brier score for men:", brier_score_men))
# print(paste("AUC for women:", auc_women))
# print(paste("Brier score for women:", brier_score_women))
#| echo: false
#| label: fig-train_distributions
#| warning: false
#| fig-cap: Distribution of Coninuous Variables
continuous_vars <- train_set[, c("SYSBP_T","SYSBP_UT","SYSBP", "AGE", "HDLC", "TOTCHOL")]
continuous_vars_nhanes <- test_set[test_set$IS.framingham==0,c("SYSBP_T","SYSBP_UT","SYSBP", "AGE", "HDLC", "TOTCHOL")]
long_data <- continuous_vars %>%
gather(key = "Variable", value = "Value")
ggplot(long_data, aes(x = Value)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~ Variable, scales = "free", nrow = 2) +
theme_minimal() +
labs(x = "Value", y = "Frequency")
#| echo: false
#| label: fig-cov
#| warning: false
#| fig-cap: Correlation Maps of Coninuous Variables
cor_matrix <- cor(continuous_vars, use = "complete.obs")
cor_matrix_NHANES <-cor(continuous_vars_nhanes, use = "complete.obs")
cov_matrix <- cov(continuous_vars, use = "complete.obs")
corrplot(cor_matrix, method = "circle",
tl.col = "black", tl.srt = 45)
#| echo: false
#| label: fig-cov
#| warning: false
#| fig-cap: Correlation Maps of Coninuous Variables
cor_matrix <- cor(continuous_vars[,3:6], use = "complete.obs")
cor_matrix_NHANES <-cor(continuous_vars_nhanes, use = "complete.obs")
cov_matrix <- cov(continuous_vars, use = "complete.obs")
corrplot(cor_matrix, method = "circle",
tl.col = "black", tl.srt = 45)
#| echo: false
#| label: sim data
#| warning: false
cor_matrix_sim_1 <- cor_matrix[3:6,3:6]
#| echo: false
#| label: fig-cov
#| warning: false
#| fig-cap: Correlation Maps of Coninuous Variables
cor_matrix <- cor(continuous_vars[], use = "complete.obs")
cor_matrix_NHANES <-cor(continuous_vars_nhanes, use = "complete.obs")
cov_matrix <- cov(continuous_vars, use = "complete.obs")
corrplot(cor_matrix[3:6,3:6], method = "circle",
tl.col = "black", tl.srt = 45)
#| echo: false
#| label: sim data
#| warning: false
cor_matrix_sim_1 <- cor_matrix[3:6,3:6]
cor_matrix_NHANES_sim <-cor_matrix_NHANES[3:6,3:6]
cor_matrix_sim_2 <- cor_matrix_sim_1*0.3+cor_matrix_NHANES_sim*0.7
cor_matrix_sim_3 <- cor_matrix_sim_1*0.5+cor_matrix_NHANES_sim*0.5
cor_matrix_sim_4 <- cor_matrix_sim_1*0.7+cor_matrix_NHANES_sim*0.3
nrow_men=2105
nrow_women=2205
P_cate_men=c(429,370,627)/2105
P_cate_women=c(316,271,640)/2205
# SYSBP,AGE,HDLC,TOTCHOL
mean_vec_men=c(126.44,50.15,48.11,183.1)
mean_vec_women=c(123.7,48.9,58.1,190.51)
std_vec_men=c(16.83,18.83,13.59,41.65)
std_vec_women=c(20.36,18.57,15.68,41.20)
### Get covariance matrix from Framingham training set. Substitute the variance with what we got from NHanes_table
sim_data <- function(cor_matrix,std_vec,mean_vec,p_vec,nrow,test_set){
set.seed(123)
cov_matrix <- cor_matrix * (std_vec %*% t(std_vec))
simulated_data <- MASS::mvrnorm(nrow, mu = mean_vec, Sigma = cov_matrix)
simulated_CURSMOKE <- rbinom(n = nrow, size = 1, prob = p_vec[1])
simulated_DIABETES <- rbinom(n = nrow, size = 1, prob = p_vec[2])
simulated_BPMEDS <- rbinom(n = nrow, size = 1, prob = p_vec[3])
# 将模拟的连续变量和分类变量合并成一个数据框
simulated_data <- data.frame(simulated_data)
simulated_data$CURSMOKE <- simulated_CURSMOKE
simulated_data$DIABETES <- simulated_DIABETES
simulated_data$BPMEDS <- simulated_BPMEDS
# 为数据框中的列命名
colnames(simulated_data) <- c("SYSBP","AGE","HDLC","TOTCHOL","CURSMOKE","DIABETES","BPMEDS")
simulated_data$SYSBP_UT <- ifelse(simulated_data$BPMEDS == 0,
simulated_data$SYSBP, 0)
simulated_data$SYSBP_T <- ifelse(simulated_data$BPMEDS == 1,
simulated_data$SYSBP, 0)
simulated_data$IS.framingham = 0
test_set_temp <- test_set[,names(simulated_data)]
simulated_data <- rbind(simulated_data,test_set_temp)
return(simulated_data)
}
sim_men_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_women_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
phi_beta_sim_men_1 <- Tran_Brier(sim_men_1,Y.fram.test.true.men,Y.fram.test.pred.men)
#| label: transported performance in NHANES
#| warning: false
#| echo: false
Tran_Brier <- function(test_set,Y.fram.test.true,Y.fram.test.pred){
Ps_X <- glm(IS.framingham~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+log(SYSBP_T+1)+CURSMOKE+DIABETES,
data= test_set, family= "binomial")
O_X <- (1-Ps_X$fitted.values)/Ps_X$fitted.values
O_X.fram <- O_X[test_set$IS.framingham==1]
phi_beta <- sum(O_X.fram*(Y.fram.test.true - Y.fram.test.pred)^2)/sum(test_set$IS.framingham==0)
phi_beta
}
# prediction for Pr(S|X_i,D_{test,i}=1) with glm
# X CVD~log(HDLC)+log(TOTCHOL)+log(AGE)+log(SYSBP_UT+1)+log(SYSBP_T+1)+CURSMOKE+DIABETES
# for men
phi_beta_men <- Tran_Brier(test_set_men,Y.fram.test.true.men,Y.fram.test.pred.men)
paste0("Transportation Brier Score for men is ", phi_beta_men)
# for women
phi_beta_women <- Tran_Brier(test_set_women,Y.fram.test.true.women,Y.fram.test.pred.women)
paste0("Transportation Brier Score for women is ", phi_beta_women)
#| echo: false
#| label: sim data
#| warning: false
cor_matrix_sim_1 <- cor_matrix[3:6,3:6]
cor_matrix_NHANES_sim <-cor_matrix_NHANES[3:6,3:6]
cor_matrix_sim_2 <- cor_matrix_sim_1*0.3+cor_matrix_NHANES_sim*0.7
cor_matrix_sim_3 <- cor_matrix_sim_1*0.5+cor_matrix_NHANES_sim*0.5
cor_matrix_sim_4 <- cor_matrix_sim_1*0.7+cor_matrix_NHANES_sim*0.3
nrow_men=2105
nrow_women=2205
P_cate_men=c(429,370,627)/2105
P_cate_women=c(316,271,640)/2205
# SYSBP,AGE,HDLC,TOTCHOL
mean_vec_men=c(126.44,50.15,48.11,183.1)
mean_vec_women=c(123.7,48.9,58.1,190.51)
std_vec_men=c(16.83,18.83,13.59,41.65)
std_vec_women=c(20.36,18.57,15.68,41.20)
### Get covariance matrix from Framingham training set. Substitute the variance with what we got from NHanes_table
sim_data <- function(cor_matrix,std_vec,mean_vec,p_vec,nrow,test_set){
set.seed(123)
cov_matrix <- cor_matrix * (std_vec %*% t(std_vec))
simulated_data <- MASS::mvrnorm(nrow, mu = mean_vec, Sigma = cov_matrix)
simulated_CURSMOKE <- rbinom(n = nrow, size = 1, prob = p_vec[1])
simulated_DIABETES <- rbinom(n = nrow, size = 1, prob = p_vec[2])
simulated_BPMEDS <- rbinom(n = nrow, size = 1, prob = p_vec[3])
# 将模拟的连续变量和分类变量合并成一个数据框
simulated_data <- data.frame(simulated_data)
simulated_data$CURSMOKE <- simulated_CURSMOKE
simulated_data$DIABETES <- simulated_DIABETES
simulated_data$BPMEDS <- simulated_BPMEDS
# 为数据框中的列命名
colnames(simulated_data) <- c("SYSBP","AGE","HDLC","TOTCHOL","CURSMOKE","DIABETES","BPMEDS")
simulated_data$SYSBP_UT <- ifelse(simulated_data$BPMEDS == 0,
simulated_data$SYSBP, 0)
simulated_data$SYSBP_T <- ifelse(simulated_data$BPMEDS == 1,
simulated_data$SYSBP, 0)
simulated_data$IS.framingham = 0
test_set_temp <- test_set[,names(simulated_data)]
simulated_data <- rbind(simulated_data,test_set_temp)
return(simulated_data)
}
sim_men_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_men_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_men,mean_vec = mean_vec_men,p_vec = P_cate_men,nrow = nrow_men,test_set = test_set_men)
sim_women_1 <-sim_data(cor_matrix = cor_matrix_sim_1,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_2 <-sim_data(cor_matrix = cor_matrix_sim_2,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_3 <-sim_data(cor_matrix = cor_matrix_sim_3,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
sim_women_4 <-sim_data(cor_matrix = cor_matrix_sim_4,std_vec = std_vec_women,mean_vec = mean_vec_women,p_vec = P_cate_women,nrow = nrow_women,test_set = test_set_women)
phi_beta_sim_men_1 <- Tran_Brier(sim_men_1,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_2 <- Tran_Brier(sim_men_2,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_3 <- Tran_Brier(sim_men_3,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_men_4 <- Tran_Brier(sim_men_4,Y.fram.test.true.men,Y.fram.test.pred.men)
phi_beta_sim_women_1 <- Tran_Brier(sim_women_1,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_women_2 <- Tran_Brier(sim_women_2,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_women_3 <- Tran_Brier(sim_women_3,Y.fram.test.true.women,Y.fram.test.pred.women)
phi_beta_sim_women_4 <- Tran_Brier(sim_women_4,Y.fram.test.true.women,Y.fram.test.pred.women)
